package org.ploxie.engine2.pipeline;

import org.ploxie.engine2.buffer.vertex.VertexInputInfo;
import org.ploxie.engine2.pipeline.data.CullFaceSide;
import org.ploxie.engine2.pipeline.data.FrontFaceVertexWinding;
import org.ploxie.engine2.pipeline.data.PolygonDrawMode;
import org.ploxie.engine2.pipeline.data.PrimitiveTopology;
import org.ploxie.engine2.pipeline.shader.ShaderModule;
import org.ploxie.engine2.pipeline.shader.ShaderModules;

import lombok.Data;

@Data
public class Pipeline {

	protected PrimitiveTopology topology = PrimitiveTopology.TRIANGLE_LIST;
	protected PolygonDrawMode polygonDrawMode = PolygonDrawMode.FILL;
	protected FrontFaceVertexWinding frontFaceVertexWinding = FrontFaceVertexWinding.COUNTER_CLOCKWISE;
	protected CullFaceSide cullFaceSide = CullFaceSide.BACK;
	protected float lineWidth = 1.0f;
	protected boolean depthClampEnabled = false;
	protected boolean rasterizerDiscardEnabled = false;

	protected boolean colorWriteMaskR = true;
	protected boolean colorWriteMaskG = true;
	protected boolean colorWriteMaskB = true;
	protected boolean colorWriteMaskA = true;

	protected boolean dynamicViewport = true;
	protected boolean dynamicScissor = true;
	protected boolean dynamicBlendConstants = false;

	// TODO multisampliing
	
	// not needed if vertices are generated by shaders
	protected VertexInputInfo vertexInputInfo;
	protected final ShaderModules shaderModules;
	protected UniformBuffer uniformBuffer;

	public int getDynamicStatesCount() {
		int count = 0;
		if (dynamicViewport) {
			count++;
		}
		if (dynamicScissor) {
			count++;
		}
		if (dynamicBlendConstants) {
			count++;
		}
		return count;
	}
	
}
